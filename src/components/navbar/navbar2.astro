---
interface itemtype {
  title: string;
  path: string;
  children?: itemtype[];
  badge?: string;
}


const menuitems:itemtype[] = [
  {
    title: "Services",
    path: "/services",
    children: [
      {title: "Commercial", path: "/services/commercial"},
      {title: "Residential", path: "/services/residential"},
    ]
  },
  {
    title: "About",
    path: "/about",
    badge: '',
  },
  {
    title: "Blog",
    path: "/blog",
  },
  {
    title: "Contact",
    path: "/contact",
  },
];


---


<div class="max-w-screen-xl mx-auto container z-40 bg-white dark:bg-dark align-middle min-h-fit h-fit top-0 sticky left-0 mt-0 py-2  px-8 min-w-[100vw]" id="navbar">

  <header class="flex flex-col lg:flex-row justify-between items-center my-0 w-100 ">

    <div class="flex w-full lg:w-auto items-center justify-between">
<!-- LOGO AND TITLE -->
<div class="flex flex-inline align-middle">
      <a href="/" class="logo" draggable="false">
        <!-- Logo -->
        <svg xmlns="http://www.w3.org/2000/svg" height="50px" viewBox="0 0 404.352 224" class="stroke-black">
          <g id="Group_1" transform="translate(-326.937 -336.863)">
            <g id="Ellipse_1" transform="translate(403.437 365.863)" fill="none" stroke-width="15">
              <ellipse cx="83.5" cy="84" rx="83.5" ry="84" stroke="none"></ellipse>
              <ellipse cx="83.5" cy="84" rx="76.75" ry="77.25" fill="none"></ellipse>
            </g>
            <g id="Ellipse_2" transform="translate(487.437 365.863)" fill="none" stroke-width="15">
              <circle cx="84" cy="84" r="84" stroke="none"></circle>
              <circle cx="84" cy="84" r="77.25" fill="none"></circle>
            </g>
          </g>
        </svg>
      </a>
      <!-- Title -->
      <div class="self-center">
        <a href="/" class="text-lg"><span class="text-2xl">Honest </span> <span class=" text-2xl">Power</span></a>
      </div>
</div>
<!-- HAMBURGER -->
      <div class="block BOOG lg:hidden">
        <button id="astronav-menu" aria-label="Toggle Menu">
          <svg fill="currentColor" class="w-[28px] h-[28px] text-neutral-content" width="28" height="28" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <title>Toggle Menu</title>
            <path class="astronav-close-icon astronav-toggle hidden" fill-rule="evenodd" clip-rule="evenodd" d="M18.278 16.864a1 1 0 01-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 01-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 011.414-1.414l4.829 4.828 4.828-4.828a1 1 0 111.414 1.414l-4.828 4.829 4.828 4.828z"></path>
            <path class="astronav-open-icon astronav-toggle" fill-rule="evenodd" d="M4 5h16a1 1 0 010 2H4a1 1 0 110-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2z"></path>
          </svg>
        </button>
      </div>
    </div>
<!-- NAVIGATION -->

    <nav class="astronav-items astronav-toggle w-full ml-16 lg:w-auto mt-2 lg:flex lg:mt-0 hidden">
      <ul class="flex flex-col lg:flex-row lg:gap-3">
        {menuitems.map((item:itemtype) => (
          item.children && item.children.length > 0 ? (
            <li class="relative" key={item.title}>
              <menu class="astronav-dropdown group" aria-expanded="false">
                <button class="flex items-center gap-1 w-full lg:w-auto lg:px-3 py-2 text-base-content hover:text-gray-900">
                  <span>{item.title}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" class="w-3 h-3 mt-0.5 group-open:rotate-180 toggle-chevron">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
                  </svg>
                </button>
                <div class="astronav-dropdown dropdown-toggle hidden dropdown-group" aria-expanded="false">

                  <div class="lg:absolute w-full lg:w-48 z-10 lg:left-0 origin-top-left">
                    <div class="px-3 lg:py-2 lg:bg-white lg:rounded-md lg:shadow lg:border flex flex-col">
                      {item.children.map((child) => (
                        <a href={child.path} class="py-1 text-gray-600 hover:text-gray-900" key={child.title}>
                          {child.title}
                        </a>
                      ))}
                    </div>
                  </div>

                </div>
              </menu>
            </li>
          ) : (
            <li key={item.title}>
              <a href={item.path} class="flex lg:px-3 py-2 items-center hover:text-gray-900">
                <span>{item.title}</span>
              </a>
            </li>
          )
        ))}
      </ul>
    </nav>
    <div>
      <div class="hidden lg:flex items-center gap-4 ">

        <a href="/contact?getQuote;" class="rounded text-center transition focus-visible:ring-2 ring-offset-2 ring-gray-200 px-4 py-2 bg-black text-white hover:bg-gray-800 border-2 border-transparent button astro-P5FXXAUY">Get a quote
        </a>
      </div>
    </div>
  </header>

</div>

<script >(
  function(){
    const closeOnClick = false;
    document.addEventListener("DOMContentLoaded", () => {
      // Mobile nav toggle
      const menuButton = document.getElementById("astronav-menu");

      menuButton && menuButton.addEventListener("click", toggleMobileNav);

      // Dropdown menus
      const dropdownMenus = document.querySelectorAll(".astronav-dropdown");
      dropdownMenus.forEach((menu) => {
        const button = menu.querySelector("button");
        button &&
        button.addEventListener("click", (event) =>
          toggleDropdownMenu(event, menu, dropdownMenus)
        );

        // Handle Submenu Dropdowns
        const dropDownSubmenus = menu.querySelectorAll(
          ".astronav-dropdown-submenu"
        );

        dropDownSubmenus.forEach((submenu) => {
          const submenuButton = submenu.querySelector("button");
          submenuButton &&
          submenuButton.addEventListener("click", (event) => {
            event.stopImmediatePropagation();
            console.log("click");
            toggleSubmenuDropdown(event, submenu);
          });
        });
      });

      // Clicking away from dropdown will remove the dropdown class
      document.addEventListener("click", closeAllDropdowns);

      if (closeOnClick) {
        handleCloseOnClick();
      }
    });

    function toggleMobileNav() {
      [...document.querySelectorAll(".astronav-toggle")].forEach((el:HTMLElement) => {
        el.classList.toggle("hidden");
      });
    }

    function toggleDropdownMenu(event, menu, dropdownMenus) {
      toggleMenu(menu);

      // Close one dropdown when selecting another
      Array.from(dropdownMenus)
        .filter((el) => el !== menu && !menu.contains(el))
        .forEach(closeMenu);

      event.stopPropagation();
    }

    function toggleSubmenuDropdown(event, submenu) {
      event.stopPropagation();
      toggleMenu(submenu);

      // Close sibling submenus at the same nesting level
      const siblingSubmenus = submenu
        .closest(".astronav-dropdown")
        .querySelectorAll(".astronav-dropdown-submenu");
      Array.from(siblingSubmenus)
        .filter((el) => el !== submenu && !submenu.contains(el))
        .forEach(closeMenu);
    }

    function closeAllDropdowns(event) {
      const dropdownMenus = document.querySelectorAll(".dropdown-toggle");
      const dropdownParent = document.querySelectorAll(
        ".astronav-dropdown, .astronav-dropdown-submenu"
      );
      const isButtonInsideDropdown = [
        ...document.querySelectorAll(
          ".astronav-dropdown button, .astronav-dropdown-submenu button, #astronav-menu"
        ),
      ].some((button) => button.contains(event.target));
      if (!isButtonInsideDropdown) {
        dropdownMenus.forEach((d) => {
          // if (!d.contains(event.target)) {
          d.classList.remove("open");
          d.removeAttribute("open");
          d.classList.add("hidden");
          // }
        });
        dropdownParent.forEach((d) => {
          d.classList.remove("open");
          d.removeAttribute("open");
          d.setAttribute("aria-expanded", "false");
        });
      }
    }

    function toggleMenu(menu) {
      menu.classList.toggle("open");
      const expanded = menu.getAttribute("aria-expanded") === "true";
      menu.setAttribute("aria-expanded", expanded ? "false" : "true");
      menu.hasAttribute("open")
        ? menu.removeAttribute("open")
        : menu.setAttribute("open", "");

      const dropdownToggle = menu.querySelector(".dropdown-toggle");
      const dropdownExpanded = dropdownToggle.getAttribute("aria-expanded");
      dropdownToggle.classList.toggle("hidden");
      dropdownToggle.setAttribute(
        "aria-expanded",
        dropdownExpanded === "true" ? "false" : "true"
      );
    }

    function closeMenu(menu) {
      console.log("closing", menu);
      menu.classList.remove("open");
      menu.removeAttribute("open");
      menu.setAttribute("aria-expanded", "false");
      const dropdownToggles = menu.querySelectorAll(".dropdown-toggle");
      dropdownToggles.forEach((toggle) => {
        toggle.classList.add("hidden");
        toggle.setAttribute("aria-expanded", "false");
      });
    }

    function handleCloseOnClick() {
      const navMenuItems = document.querySelector(".astronav-items");
      const navToggle = document.getElementById("astronav-menu");
      const navLink = navMenuItems && navMenuItems.querySelectorAll("a");

      const MenuIcons = navToggle.querySelectorAll(".astronav-toggle");

      navLink &&
      navLink.forEach((item:HTMLElement) => {
        item.addEventListener("click", () => {
          navMenuItems?.classList.add("hidden");
          MenuIcons.forEach((el:HTMLElement) => {
            el.classList.toggle("hidden");
          });
        });
      });
    }
  })();
</script>